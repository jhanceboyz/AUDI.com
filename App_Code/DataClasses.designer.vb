'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.33440
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ASPNETDB")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCargallerytable(instance As Cargallerytable)
    End Sub
  Partial Private Sub UpdateCargallerytable(instance As Cargallerytable)
    End Sub
  Partial Private Sub DeleteCargallerytable(instance As Cargallerytable)
    End Sub
  Partial Private Sub InsertCategoryTable(instance As CategoryTable)
    End Sub
  Partial Private Sub UpdateCategoryTable(instance As CategoryTable)
    End Sub
  Partial Private Sub DeleteCategoryTable(instance As CategoryTable)
    End Sub
  Partial Private Sub InsertFeatureTable(instance As FeatureTable)
    End Sub
  Partial Private Sub UpdateFeatureTable(instance As FeatureTable)
    End Sub
  Partial Private Sub DeleteFeatureTable(instance As FeatureTable)
    End Sub
  Partial Private Sub InsertSystemTable(instance As SystemTable)
    End Sub
  Partial Private Sub UpdateSystemTable(instance As SystemTable)
    End Sub
  Partial Private Sub DeleteSystemTable(instance As SystemTable)
    End Sub
  Partial Private Sub InsertTechnicalTable(instance As TechnicalTable)
    End Sub
  Partial Private Sub UpdateTechnicalTable(instance As TechnicalTable)
    End Sub
  Partial Private Sub DeleteTechnicalTable(instance As TechnicalTable)
    End Sub
  Partial Private Sub InsertBrouchureTable(instance As BrouchureTable)
    End Sub
  Partial Private Sub UpdateBrouchureTable(instance As BrouchureTable)
    End Sub
  Partial Private Sub DeleteBrouchureTable(instance As BrouchureTable)
    End Sub
  Partial Private Sub InsertPaymentTable(instance As PaymentTable)
    End Sub
  Partial Private Sub UpdatePaymentTable(instance As PaymentTable)
    End Sub
  Partial Private Sub DeletePaymentTable(instance As PaymentTable)
    End Sub
  Partial Private Sub InsertFeedbackTable(instance As FeedbackTable)
    End Sub
  Partial Private Sub UpdateFeedbackTable(instance As FeedbackTable)
    End Sub
  Partial Private Sub DeleteFeedbackTable(instance As FeedbackTable)
    End Sub
  Partial Private Sub InsertBooking_Table(instance As Booking_Table)
    End Sub
  Partial Private Sub UpdateBooking_Table(instance As Booking_Table)
    End Sub
  Partial Private Sub DeleteBooking_Table(instance As Booking_Table)
    End Sub
  Partial Private Sub InsertTestDriveTable(instance As TestDriveTable)
    End Sub
  Partial Private Sub UpdateTestDriveTable(instance As TestDriveTable)
    End Sub
  Partial Private Sub DeleteTestDriveTable(instance As TestDriveTable)
    End Sub
  Partial Private Sub InsertDealerTable(instance As DealerTable)
    End Sub
  Partial Private Sub UpdateDealerTable(instance As DealerTable)
    End Sub
  Partial Private Sub DeleteDealerTable(instance As DealerTable)
    End Sub
  Partial Private Sub InsertCartable(instance As Cartable)
    End Sub
  Partial Private Sub UpdateCartable(instance As Cartable)
    End Sub
  Partial Private Sub DeleteCartable(instance As Cartable)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("ConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Cargallerytables() As System.Data.Linq.Table(Of Cargallerytable)
		Get
			Return Me.GetTable(Of Cargallerytable)
		End Get
	End Property
	
	Public ReadOnly Property CategoryTables() As System.Data.Linq.Table(Of CategoryTable)
		Get
			Return Me.GetTable(Of CategoryTable)
		End Get
	End Property
	
	Public ReadOnly Property FeatureTables() As System.Data.Linq.Table(Of FeatureTable)
		Get
			Return Me.GetTable(Of FeatureTable)
		End Get
	End Property
	
	Public ReadOnly Property SystemTables() As System.Data.Linq.Table(Of SystemTable)
		Get
			Return Me.GetTable(Of SystemTable)
		End Get
	End Property
	
	Public ReadOnly Property TechnicalTables() As System.Data.Linq.Table(Of TechnicalTable)
		Get
			Return Me.GetTable(Of TechnicalTable)
		End Get
	End Property
	
	Public ReadOnly Property BrouchureTables() As System.Data.Linq.Table(Of BrouchureTable)
		Get
			Return Me.GetTable(Of BrouchureTable)
		End Get
	End Property
	
	Public ReadOnly Property PaymentTables() As System.Data.Linq.Table(Of PaymentTable)
		Get
			Return Me.GetTable(Of PaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property FeedbackTables() As System.Data.Linq.Table(Of FeedbackTable)
		Get
			Return Me.GetTable(Of FeedbackTable)
		End Get
	End Property
	
	Public ReadOnly Property Booking_Tables() As System.Data.Linq.Table(Of Booking_Table)
		Get
			Return Me.GetTable(Of Booking_Table)
		End Get
	End Property
	
	Public ReadOnly Property TestDriveTables() As System.Data.Linq.Table(Of TestDriveTable)
		Get
			Return Me.GetTable(Of TestDriveTable)
		End Get
	End Property
	
	Public ReadOnly Property DealerTables() As System.Data.Linq.Table(Of DealerTable)
		Get
			Return Me.GetTable(Of DealerTable)
		End Get
	End Property
	
	Public ReadOnly Property Cartables() As System.Data.Linq.Table(Of Cartable)
		Get
			Return Me.GetTable(Of Cartable)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cargallerytable")>  _
Partial Public Class Cargallerytable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Galleryid As Integer
	
	Private _CarId As Integer
	
	Private _Image As String
	
	Private _Title As String
	
	Private _Status As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGalleryidChanging(value As Integer)
    End Sub
    Partial Private Sub OnGalleryidChanged()
    End Sub
    Partial Private Sub OnCarIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCarIdChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As String)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Galleryid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Galleryid() As Integer
		Get
			Return Me._Galleryid
		End Get
		Set
			If ((Me._Galleryid = value)  _
						= false) Then
				Me.OnGalleryidChanging(value)
				Me.SendPropertyChanging
				Me._Galleryid = value
				Me.SendPropertyChanged("Galleryid")
				Me.OnGalleryidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CarId", DbType:="Int NOT NULL")>  _
	Public Property CarId() As Integer
		Get
			Return Me._CarId
		End Get
		Set
			If ((Me._CarId = value)  _
						= false) Then
				Me.OnCarIdChanging(value)
				Me.SendPropertyChanging
				Me._CarId = value
				Me.SendPropertyChanged("CarId")
				Me.OnCarIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="VarChar(50)")>  _
	Public Property Image() As String
		Get
			Return Me._Image
		End Get
		Set
			If (String.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CategoryTable")>  _
Partial Public Class CategoryTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryId As Integer
	
	Private _CategoryName As String
	
	Private _Status As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIdChanged()
    End Sub
    Partial Private Sub OnCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryNameChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CategoryId() As Integer
		Get
			Return Me._CategoryId
		End Get
		Set
			If ((Me._CategoryId = value)  _
						= false) Then
				Me.OnCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._CategoryId = value
				Me.SendPropertyChanged("CategoryId")
				Me.OnCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="VarChar(50)")>  _
	Public Property CategoryName() As String
		Get
			Return Me._CategoryName
		End Get
		Set
			If (String.Equals(Me._CategoryName, value) = false) Then
				Me.OnCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._CategoryName = value
				Me.SendPropertyChanged("CategoryName")
				Me.OnCategoryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FeatureTable")>  _
Partial Public Class FeatureTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Carid As String
	
	Private _Seating As System.Nullable(Of Integer)
	
	Private _WheelBase As String
	
	Private _RimSize As String
	
	Private _Mileage As String
	
	Private _DriveTrain As String
	
	Private _TurningRadies As String
	
	Private _EngineDisplacement As String
	
	Private _EngineTechnology As String
	
	Private _FuelCapacity As String
	
	Private _Fuel As String
	
	Private _Range As String
	
	Private _EntertainmentFeature As String
	
	Private _Kmph As String
	
	Private _Security As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCaridChanging(value As String)
    End Sub
    Partial Private Sub OnCaridChanged()
    End Sub
    Partial Private Sub OnSeatingChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSeatingChanged()
    End Sub
    Partial Private Sub OnWheelBaseChanging(value As String)
    End Sub
    Partial Private Sub OnWheelBaseChanged()
    End Sub
    Partial Private Sub OnRimSizeChanging(value As String)
    End Sub
    Partial Private Sub OnRimSizeChanged()
    End Sub
    Partial Private Sub OnMileageChanging(value As String)
    End Sub
    Partial Private Sub OnMileageChanged()
    End Sub
    Partial Private Sub OnDriveTrainChanging(value As String)
    End Sub
    Partial Private Sub OnDriveTrainChanged()
    End Sub
    Partial Private Sub OnTurningRadiesChanging(value As String)
    End Sub
    Partial Private Sub OnTurningRadiesChanged()
    End Sub
    Partial Private Sub OnEngineDisplacementChanging(value As String)
    End Sub
    Partial Private Sub OnEngineDisplacementChanged()
    End Sub
    Partial Private Sub OnEngineTechnologyChanging(value As String)
    End Sub
    Partial Private Sub OnEngineTechnologyChanged()
    End Sub
    Partial Private Sub OnFuelCapacityChanging(value As String)
    End Sub
    Partial Private Sub OnFuelCapacityChanged()
    End Sub
    Partial Private Sub OnFuelChanging(value As String)
    End Sub
    Partial Private Sub OnFuelChanged()
    End Sub
    Partial Private Sub OnRangeChanging(value As String)
    End Sub
    Partial Private Sub OnRangeChanged()
    End Sub
    Partial Private Sub OnEntertainmentFeatureChanging(value As String)
    End Sub
    Partial Private Sub OnEntertainmentFeatureChanged()
    End Sub
    Partial Private Sub OnKmphChanging(value As String)
    End Sub
    Partial Private Sub OnKmphChanged()
    End Sub
    Partial Private Sub OnSecurityChanging(value As String)
    End Sub
    Partial Private Sub OnSecurityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Carid", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Carid() As String
		Get
			Return Me._Carid
		End Get
		Set
			If (String.Equals(Me._Carid, value) = false) Then
				Me.OnCaridChanging(value)
				Me.SendPropertyChanging
				Me._Carid = value
				Me.SendPropertyChanged("Carid")
				Me.OnCaridChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seating", DbType:="Int")>  _
	Public Property Seating() As System.Nullable(Of Integer)
		Get
			Return Me._Seating
		End Get
		Set
			If (Me._Seating.Equals(value) = false) Then
				Me.OnSeatingChanging(value)
				Me.SendPropertyChanging
				Me._Seating = value
				Me.SendPropertyChanged("Seating")
				Me.OnSeatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WheelBase", DbType:="VarChar(50)")>  _
	Public Property WheelBase() As String
		Get
			Return Me._WheelBase
		End Get
		Set
			If (String.Equals(Me._WheelBase, value) = false) Then
				Me.OnWheelBaseChanging(value)
				Me.SendPropertyChanging
				Me._WheelBase = value
				Me.SendPropertyChanged("WheelBase")
				Me.OnWheelBaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RimSize", DbType:="VarChar(50)")>  _
	Public Property RimSize() As String
		Get
			Return Me._RimSize
		End Get
		Set
			If (String.Equals(Me._RimSize, value) = false) Then
				Me.OnRimSizeChanging(value)
				Me.SendPropertyChanging
				Me._RimSize = value
				Me.SendPropertyChanged("RimSize")
				Me.OnRimSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mileage", DbType:="VarChar(50)")>  _
	Public Property Mileage() As String
		Get
			Return Me._Mileage
		End Get
		Set
			If (String.Equals(Me._Mileage, value) = false) Then
				Me.OnMileageChanging(value)
				Me.SendPropertyChanging
				Me._Mileage = value
				Me.SendPropertyChanged("Mileage")
				Me.OnMileageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriveTrain", DbType:="VarChar(50)")>  _
	Public Property DriveTrain() As String
		Get
			Return Me._DriveTrain
		End Get
		Set
			If (String.Equals(Me._DriveTrain, value) = false) Then
				Me.OnDriveTrainChanging(value)
				Me.SendPropertyChanging
				Me._DriveTrain = value
				Me.SendPropertyChanged("DriveTrain")
				Me.OnDriveTrainChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TurningRadies", DbType:="VarChar(50)")>  _
	Public Property TurningRadies() As String
		Get
			Return Me._TurningRadies
		End Get
		Set
			If (String.Equals(Me._TurningRadies, value) = false) Then
				Me.OnTurningRadiesChanging(value)
				Me.SendPropertyChanging
				Me._TurningRadies = value
				Me.SendPropertyChanged("TurningRadies")
				Me.OnTurningRadiesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EngineDisplacement", DbType:="VarChar(50)")>  _
	Public Property EngineDisplacement() As String
		Get
			Return Me._EngineDisplacement
		End Get
		Set
			If (String.Equals(Me._EngineDisplacement, value) = false) Then
				Me.OnEngineDisplacementChanging(value)
				Me.SendPropertyChanging
				Me._EngineDisplacement = value
				Me.SendPropertyChanged("EngineDisplacement")
				Me.OnEngineDisplacementChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EngineTechnology", DbType:="VarChar(50)")>  _
	Public Property EngineTechnology() As String
		Get
			Return Me._EngineTechnology
		End Get
		Set
			If (String.Equals(Me._EngineTechnology, value) = false) Then
				Me.OnEngineTechnologyChanging(value)
				Me.SendPropertyChanging
				Me._EngineTechnology = value
				Me.SendPropertyChanged("EngineTechnology")
				Me.OnEngineTechnologyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FuelCapacity", DbType:="VarChar(50)")>  _
	Public Property FuelCapacity() As String
		Get
			Return Me._FuelCapacity
		End Get
		Set
			If (String.Equals(Me._FuelCapacity, value) = false) Then
				Me.OnFuelCapacityChanging(value)
				Me.SendPropertyChanging
				Me._FuelCapacity = value
				Me.SendPropertyChanged("FuelCapacity")
				Me.OnFuelCapacityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fuel", DbType:="VarChar(50)")>  _
	Public Property Fuel() As String
		Get
			Return Me._Fuel
		End Get
		Set
			If (String.Equals(Me._Fuel, value) = false) Then
				Me.OnFuelChanging(value)
				Me.SendPropertyChanging
				Me._Fuel = value
				Me.SendPropertyChanged("Fuel")
				Me.OnFuelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Range", DbType:="VarChar(50)")>  _
	Public Property Range() As String
		Get
			Return Me._Range
		End Get
		Set
			If (String.Equals(Me._Range, value) = false) Then
				Me.OnRangeChanging(value)
				Me.SendPropertyChanging
				Me._Range = value
				Me.SendPropertyChanged("Range")
				Me.OnRangeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntertainmentFeature", DbType:="VarChar(MAX)")>  _
	Public Property EntertainmentFeature() As String
		Get
			Return Me._EntertainmentFeature
		End Get
		Set
			If (String.Equals(Me._EntertainmentFeature, value) = false) Then
				Me.OnEntertainmentFeatureChanging(value)
				Me.SendPropertyChanging
				Me._EntertainmentFeature = value
				Me.SendPropertyChanged("EntertainmentFeature")
				Me.OnEntertainmentFeatureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Kmph", DbType:="VarChar(50)")>  _
	Public Property Kmph() As String
		Get
			Return Me._Kmph
		End Get
		Set
			If (String.Equals(Me._Kmph, value) = false) Then
				Me.OnKmphChanging(value)
				Me.SendPropertyChanging
				Me._Kmph = value
				Me.SendPropertyChanged("Kmph")
				Me.OnKmphChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Security", DbType:="VarChar(MAX)")>  _
	Public Property Security() As String
		Get
			Return Me._Security
		End Get
		Set
			If (String.Equals(Me._Security, value) = false) Then
				Me.OnSecurityChanging(value)
				Me.SendPropertyChanging
				Me._Security = value
				Me.SendPropertyChanged("Security")
				Me.OnSecurityChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SystemTable")>  _
Partial Public Class SystemTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ImageId As System.Nullable(Of Integer)
	
	Private _BookingId As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnImageIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnImageIdChanged()
    End Sub
    Partial Private Sub OnBookingIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBookingIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageId", DbType:="Int")>  _
	Public Property ImageId() As System.Nullable(Of Integer)
		Get
			Return Me._ImageId
		End Get
		Set
			If (Me._ImageId.Equals(value) = false) Then
				Me.OnImageIdChanging(value)
				Me.SendPropertyChanging
				Me._ImageId = value
				Me.SendPropertyChanged("ImageId")
				Me.OnImageIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingId", DbType:="Int")>  _
	Public Property BookingId() As System.Nullable(Of Integer)
		Get
			Return Me._BookingId
		End Get
		Set
			If (Me._BookingId.Equals(value) = false) Then
				Me.OnBookingIdChanging(value)
				Me.SendPropertyChanging
				Me._BookingId = value
				Me.SendPropertyChanged("BookingId")
				Me.OnBookingIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TechnicalTable")>  _
Partial Public Class TechnicalTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CarId As Integer
	
	Private _TyreSize As String
	
	Private _TransmissionType As String
	
	Private _MaxPower As String
	
	Private _MaxTorque As String
	
	Private _BoreStroke As String
	
	Private _FuelInjection As String
	
	Private _EngineType As String
	
	Private _NumberofCylinder As System.Nullable(Of Integer)
	
	Private _PositionofEngine As String
	
	Private _Layout As String
	
	Private _CompressionRatio As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCarIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCarIdChanged()
    End Sub
    Partial Private Sub OnTyreSizeChanging(value As String)
    End Sub
    Partial Private Sub OnTyreSizeChanged()
    End Sub
    Partial Private Sub OnTransmissionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTransmissionTypeChanged()
    End Sub
    Partial Private Sub OnMaxPowerChanging(value As String)
    End Sub
    Partial Private Sub OnMaxPowerChanged()
    End Sub
    Partial Private Sub OnMaxTorqueChanging(value As String)
    End Sub
    Partial Private Sub OnMaxTorqueChanged()
    End Sub
    Partial Private Sub OnBoreStrokeChanging(value As String)
    End Sub
    Partial Private Sub OnBoreStrokeChanged()
    End Sub
    Partial Private Sub OnFuelInjectionChanging(value As String)
    End Sub
    Partial Private Sub OnFuelInjectionChanged()
    End Sub
    Partial Private Sub OnEngineTypeChanging(value As String)
    End Sub
    Partial Private Sub OnEngineTypeChanged()
    End Sub
    Partial Private Sub OnNumberofCylinderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumberofCylinderChanged()
    End Sub
    Partial Private Sub OnPositionofEngineChanging(value As String)
    End Sub
    Partial Private Sub OnPositionofEngineChanged()
    End Sub
    Partial Private Sub OnLayoutChanging(value As String)
    End Sub
    Partial Private Sub OnLayoutChanged()
    End Sub
    Partial Private Sub OnCompressionRatioChanging(value As String)
    End Sub
    Partial Private Sub OnCompressionRatioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CarId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CarId() As Integer
		Get
			Return Me._CarId
		End Get
		Set
			If ((Me._CarId = value)  _
						= false) Then
				Me.OnCarIdChanging(value)
				Me.SendPropertyChanging
				Me._CarId = value
				Me.SendPropertyChanged("CarId")
				Me.OnCarIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TyreSize", DbType:="VarChar(50)")>  _
	Public Property TyreSize() As String
		Get
			Return Me._TyreSize
		End Get
		Set
			If (String.Equals(Me._TyreSize, value) = false) Then
				Me.OnTyreSizeChanging(value)
				Me.SendPropertyChanging
				Me._TyreSize = value
				Me.SendPropertyChanged("TyreSize")
				Me.OnTyreSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransmissionType", DbType:="VarChar(50)")>  _
	Public Property TransmissionType() As String
		Get
			Return Me._TransmissionType
		End Get
		Set
			If (String.Equals(Me._TransmissionType, value) = false) Then
				Me.OnTransmissionTypeChanging(value)
				Me.SendPropertyChanging
				Me._TransmissionType = value
				Me.SendPropertyChanged("TransmissionType")
				Me.OnTransmissionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxPower", DbType:="VarChar(50)")>  _
	Public Property MaxPower() As String
		Get
			Return Me._MaxPower
		End Get
		Set
			If (String.Equals(Me._MaxPower, value) = false) Then
				Me.OnMaxPowerChanging(value)
				Me.SendPropertyChanging
				Me._MaxPower = value
				Me.SendPropertyChanged("MaxPower")
				Me.OnMaxPowerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxTorque", DbType:="VarChar(50)")>  _
	Public Property MaxTorque() As String
		Get
			Return Me._MaxTorque
		End Get
		Set
			If (String.Equals(Me._MaxTorque, value) = false) Then
				Me.OnMaxTorqueChanging(value)
				Me.SendPropertyChanging
				Me._MaxTorque = value
				Me.SendPropertyChanged("MaxTorque")
				Me.OnMaxTorqueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BoreStroke", DbType:="VarChar(50)")>  _
	Public Property BoreStroke() As String
		Get
			Return Me._BoreStroke
		End Get
		Set
			If (String.Equals(Me._BoreStroke, value) = false) Then
				Me.OnBoreStrokeChanging(value)
				Me.SendPropertyChanging
				Me._BoreStroke = value
				Me.SendPropertyChanged("BoreStroke")
				Me.OnBoreStrokeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FuelInjection", DbType:="VarChar(50)")>  _
	Public Property FuelInjection() As String
		Get
			Return Me._FuelInjection
		End Get
		Set
			If (String.Equals(Me._FuelInjection, value) = false) Then
				Me.OnFuelInjectionChanging(value)
				Me.SendPropertyChanging
				Me._FuelInjection = value
				Me.SendPropertyChanged("FuelInjection")
				Me.OnFuelInjectionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EngineType", DbType:="VarChar(50)")>  _
	Public Property EngineType() As String
		Get
			Return Me._EngineType
		End Get
		Set
			If (String.Equals(Me._EngineType, value) = false) Then
				Me.OnEngineTypeChanging(value)
				Me.SendPropertyChanging
				Me._EngineType = value
				Me.SendPropertyChanged("EngineType")
				Me.OnEngineTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberofCylinder", DbType:="Int")>  _
	Public Property NumberofCylinder() As System.Nullable(Of Integer)
		Get
			Return Me._NumberofCylinder
		End Get
		Set
			If (Me._NumberofCylinder.Equals(value) = false) Then
				Me.OnNumberofCylinderChanging(value)
				Me.SendPropertyChanging
				Me._NumberofCylinder = value
				Me.SendPropertyChanged("NumberofCylinder")
				Me.OnNumberofCylinderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PositionofEngine", DbType:="VarChar(50)")>  _
	Public Property PositionofEngine() As String
		Get
			Return Me._PositionofEngine
		End Get
		Set
			If (String.Equals(Me._PositionofEngine, value) = false) Then
				Me.OnPositionofEngineChanging(value)
				Me.SendPropertyChanging
				Me._PositionofEngine = value
				Me.SendPropertyChanged("PositionofEngine")
				Me.OnPositionofEngineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Layout", DbType:="VarChar(50)")>  _
	Public Property Layout() As String
		Get
			Return Me._Layout
		End Get
		Set
			If (String.Equals(Me._Layout, value) = false) Then
				Me.OnLayoutChanging(value)
				Me.SendPropertyChanging
				Me._Layout = value
				Me.SendPropertyChanged("Layout")
				Me.OnLayoutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompressionRatio", DbType:="NChar(10)")>  _
	Public Property CompressionRatio() As String
		Get
			Return Me._CompressionRatio
		End Get
		Set
			If (String.Equals(Me._CompressionRatio, value) = false) Then
				Me.OnCompressionRatioChanging(value)
				Me.SendPropertyChanging
				Me._CompressionRatio = value
				Me.SendPropertyChanged("CompressionRatio")
				Me.OnCompressionRatioChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BrouchureTable")>  _
Partial Public Class BrouchureTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BrouchureId As Integer
	
	Private _CarId As System.Nullable(Of Integer)
	
	Private _Brouchure As String
	
	Private _Title As String
	
	Private _Status As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBrouchureIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBrouchureIdChanged()
    End Sub
    Partial Private Sub OnCarIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCarIdChanged()
    End Sub
    Partial Private Sub OnBrouchureChanging(value As String)
    End Sub
    Partial Private Sub OnBrouchureChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrouchureId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BrouchureId() As Integer
		Get
			Return Me._BrouchureId
		End Get
		Set
			If ((Me._BrouchureId = value)  _
						= false) Then
				Me.OnBrouchureIdChanging(value)
				Me.SendPropertyChanging
				Me._BrouchureId = value
				Me.SendPropertyChanged("BrouchureId")
				Me.OnBrouchureIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CarId", DbType:="Int")>  _
	Public Property CarId() As System.Nullable(Of Integer)
		Get
			Return Me._CarId
		End Get
		Set
			If (Me._CarId.Equals(value) = false) Then
				Me.OnCarIdChanging(value)
				Me.SendPropertyChanging
				Me._CarId = value
				Me.SendPropertyChanged("CarId")
				Me.OnCarIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Brouchure", DbType:="VarChar(50)")>  _
	Public Property Brouchure() As String
		Get
			Return Me._Brouchure
		End Get
		Set
			If (String.Equals(Me._Brouchure, value) = false) Then
				Me.OnBrouchureChanging(value)
				Me.SendPropertyChanging
				Me._Brouchure = value
				Me.SendPropertyChanged("Brouchure")
				Me.OnBrouchureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PaymentTable")>  _
Partial Public Class PaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PaymentId As Integer
	
	Private _BookingId As System.Nullable(Of Integer)
	
	Private _CardType As String
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _CardNumber As System.Nullable(Of Decimal)
	
	Private _Name As String
	
	Private _ExpDate As String
	
	Private _CVC As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPaymentIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPaymentIdChanged()
    End Sub
    Partial Private Sub OnBookingIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBookingIdChanged()
    End Sub
    Partial Private Sub OnCardTypeChanging(value As String)
    End Sub
    Partial Private Sub OnCardTypeChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnCardNumberChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCardNumberChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnExpDateChanging(value As String)
    End Sub
    Partial Private Sub OnExpDateChanged()
    End Sub
    Partial Private Sub OnCVCChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCVCChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PaymentId() As Integer
		Get
			Return Me._PaymentId
		End Get
		Set
			If ((Me._PaymentId = value)  _
						= false) Then
				Me.OnPaymentIdChanging(value)
				Me.SendPropertyChanging
				Me._PaymentId = value
				Me.SendPropertyChanged("PaymentId")
				Me.OnPaymentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingId", DbType:="Int")>  _
	Public Property BookingId() As System.Nullable(Of Integer)
		Get
			Return Me._BookingId
		End Get
		Set
			If (Me._BookingId.Equals(value) = false) Then
				Me.OnBookingIdChanging(value)
				Me.SendPropertyChanging
				Me._BookingId = value
				Me.SendPropertyChanged("BookingId")
				Me.OnBookingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardType", DbType:="VarChar(50)")>  _
	Public Property CardType() As String
		Get
			Return Me._CardType
		End Get
		Set
			If (String.Equals(Me._CardType, value) = false) Then
				Me.OnCardTypeChanging(value)
				Me.SendPropertyChanging
				Me._CardType = value
				Me.SendPropertyChanged("CardType")
				Me.OnCardTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,0)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardNumber", DbType:="Decimal(18,0)")>  _
	Public Property CardNumber() As System.Nullable(Of Decimal)
		Get
			Return Me._CardNumber
		End Get
		Set
			If (Me._CardNumber.Equals(value) = false) Then
				Me.OnCardNumberChanging(value)
				Me.SendPropertyChanging
				Me._CardNumber = value
				Me.SendPropertyChanged("CardNumber")
				Me.OnCardNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpDate", DbType:="VarChar(50)")>  _
	Public Property ExpDate() As String
		Get
			Return Me._ExpDate
		End Get
		Set
			If (String.Equals(Me._ExpDate, value) = false) Then
				Me.OnExpDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpDate = value
				Me.SendPropertyChanged("ExpDate")
				Me.OnExpDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CVC", DbType:="Int")>  _
	Public Property CVC() As System.Nullable(Of Integer)
		Get
			Return Me._CVC
		End Get
		Set
			If (Me._CVC.Equals(value) = false) Then
				Me.OnCVCChanging(value)
				Me.SendPropertyChanging
				Me._CVC = value
				Me.SendPropertyChanged("CVC")
				Me.OnCVCChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FeedbackTable")>  _
Partial Public Class FeedbackTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _Email As String
	
	Private _Mobile As System.Nullable(Of Decimal)
	
	Private _Message As String
	
	Private _Status As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnMessageChanging(value As String)
    End Sub
    Partial Private Sub OnMessageChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="Decimal(18,0)")>  _
	Public Property Mobile() As System.Nullable(Of Decimal)
		Get
			Return Me._Mobile
		End Get
		Set
			If (Me._Mobile.Equals(value) = false) Then
				Me.OnMobileChanging(value)
				Me.SendPropertyChanging
				Me._Mobile = value
				Me.SendPropertyChanged("Mobile")
				Me.OnMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Message", DbType:="VarChar(50)")>  _
	Public Property Message() As String
		Get
			Return Me._Message
		End Get
		Set
			If (String.Equals(Me._Message, value) = false) Then
				Me.OnMessageChanging(value)
				Me.SendPropertyChanging
				Me._Message = value
				Me.SendPropertyChanged("Message")
				Me.OnMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Booking Table]")>  _
Partial Public Class Booking_Table
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BookingId As Decimal
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _Address As String
	
	Private _Email As String
	
	Private _Mobile As System.Nullable(Of Decimal)
	
	Private _Profession As String
	
	Private _Salary As String
	
	Private _DealerId As System.Nullable(Of Integer)
	
	Private _CarID As System.Nullable(Of Integer)
	
	Private _Date As String
	
	Private _BookingAmount As System.Nullable(Of Decimal)
	
	Private _Proof As String
	
	Private _Status As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBookingIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnBookingIdChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnProfessionChanging(value As String)
    End Sub
    Partial Private Sub OnProfessionChanged()
    End Sub
    Partial Private Sub OnSalaryChanging(value As String)
    End Sub
    Partial Private Sub OnSalaryChanged()
    End Sub
    Partial Private Sub OnDealerIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDealerIdChanged()
    End Sub
    Partial Private Sub OnCarIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCarIDChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As String)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnBookingAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBookingAmountChanged()
    End Sub
    Partial Private Sub OnProofChanging(value As String)
    End Sub
    Partial Private Sub OnProofChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingId", DbType:="Decimal(18,0) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property BookingId() As Decimal
		Get
			Return Me._BookingId
		End Get
		Set
			If ((Me._BookingId = value)  _
						= false) Then
				Me.OnBookingIdChanging(value)
				Me.SendPropertyChanging
				Me._BookingId = value
				Me.SendPropertyChanged("BookingId")
				Me.OnBookingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(MAX)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="Decimal(18,0)")>  _
	Public Property Mobile() As System.Nullable(Of Decimal)
		Get
			Return Me._Mobile
		End Get
		Set
			If (Me._Mobile.Equals(value) = false) Then
				Me.OnMobileChanging(value)
				Me.SendPropertyChanging
				Me._Mobile = value
				Me.SendPropertyChanged("Mobile")
				Me.OnMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Profession", DbType:="VarChar(50)")>  _
	Public Property Profession() As String
		Get
			Return Me._Profession
		End Get
		Set
			If (String.Equals(Me._Profession, value) = false) Then
				Me.OnProfessionChanging(value)
				Me.SendPropertyChanging
				Me._Profession = value
				Me.SendPropertyChanged("Profession")
				Me.OnProfessionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Salary", DbType:="VarChar(50)")>  _
	Public Property Salary() As String
		Get
			Return Me._Salary
		End Get
		Set
			If (String.Equals(Me._Salary, value) = false) Then
				Me.OnSalaryChanging(value)
				Me.SendPropertyChanging
				Me._Salary = value
				Me.SendPropertyChanged("Salary")
				Me.OnSalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DealerId", DbType:="Int")>  _
	Public Property DealerId() As System.Nullable(Of Integer)
		Get
			Return Me._DealerId
		End Get
		Set
			If (Me._DealerId.Equals(value) = false) Then
				Me.OnDealerIdChanging(value)
				Me.SendPropertyChanging
				Me._DealerId = value
				Me.SendPropertyChanged("DealerId")
				Me.OnDealerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CarID", DbType:="Int")>  _
	Public Property CarID() As System.Nullable(Of Integer)
		Get
			Return Me._CarID
		End Get
		Set
			If (Me._CarID.Equals(value) = false) Then
				Me.OnCarIDChanging(value)
				Me.SendPropertyChanging
				Me._CarID = value
				Me.SendPropertyChanged("CarID")
				Me.OnCarIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="VarChar(50)")>  _
	Public Property [Date]() As String
		Get
			Return Me._Date
		End Get
		Set
			If (String.Equals(Me._Date, value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingAmount", DbType:="Decimal(18,0)")>  _
	Public Property BookingAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._BookingAmount
		End Get
		Set
			If (Me._BookingAmount.Equals(value) = false) Then
				Me.OnBookingAmountChanging(value)
				Me.SendPropertyChanging
				Me._BookingAmount = value
				Me.SendPropertyChanged("BookingAmount")
				Me.OnBookingAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proof", DbType:="VarChar(50)")>  _
	Public Property Proof() As String
		Get
			Return Me._Proof
		End Get
		Set
			If (String.Equals(Me._Proof, value) = false) Then
				Me.OnProofChanging(value)
				Me.SendPropertyChanging
				Me._Proof = value
				Me.SendPropertyChanged("Proof")
				Me.OnProofChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TestDriveTable")>  _
Partial Public Class TestDriveTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _MobileNo As String
	
	Private _EMail As String
	
	Private _CarId As System.Nullable(Of Integer)
	
	Private _DealerId As System.Nullable(Of Integer)
	
	Private _Id As Integer
	
	Private _Profession As String
	
	Private _Salary As String
	
	Private _Proof As String
	
	Private _Status As String
	
	Private _BookingId As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnMobileNoChanging(value As String)
    End Sub
    Partial Private Sub OnMobileNoChanged()
    End Sub
    Partial Private Sub OnEMailChanging(value As String)
    End Sub
    Partial Private Sub OnEMailChanged()
    End Sub
    Partial Private Sub OnCarIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCarIdChanged()
    End Sub
    Partial Private Sub OnDealerIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDealerIdChanged()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnProfessionChanging(value As String)
    End Sub
    Partial Private Sub OnProfessionChanged()
    End Sub
    Partial Private Sub OnSalaryChanging(value As String)
    End Sub
    Partial Private Sub OnSalaryChanged()
    End Sub
    Partial Private Sub OnProofChanging(value As String)
    End Sub
    Partial Private Sub OnProofChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnBookingIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBookingIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileNo", DbType:="VarChar(50)")>  _
	Public Property MobileNo() As String
		Get
			Return Me._MobileNo
		End Get
		Set
			If (String.Equals(Me._MobileNo, value) = false) Then
				Me.OnMobileNoChanging(value)
				Me.SendPropertyChanging
				Me._MobileNo = value
				Me.SendPropertyChanged("MobileNo")
				Me.OnMobileNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMail", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EMail() As String
		Get
			Return Me._EMail
		End Get
		Set
			If (String.Equals(Me._EMail, value) = false) Then
				Me.OnEMailChanging(value)
				Me.SendPropertyChanging
				Me._EMail = value
				Me.SendPropertyChanged("EMail")
				Me.OnEMailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CarId", DbType:="Int")>  _
	Public Property CarId() As System.Nullable(Of Integer)
		Get
			Return Me._CarId
		End Get
		Set
			If (Me._CarId.Equals(value) = false) Then
				Me.OnCarIdChanging(value)
				Me.SendPropertyChanging
				Me._CarId = value
				Me.SendPropertyChanged("CarId")
				Me.OnCarIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DealerId", DbType:="Int")>  _
	Public Property DealerId() As System.Nullable(Of Integer)
		Get
			Return Me._DealerId
		End Get
		Set
			If (Me._DealerId.Equals(value) = false) Then
				Me.OnDealerIdChanging(value)
				Me.SendPropertyChanging
				Me._DealerId = value
				Me.SendPropertyChanged("DealerId")
				Me.OnDealerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Profession", DbType:="VarChar(50)")>  _
	Public Property Profession() As String
		Get
			Return Me._Profession
		End Get
		Set
			If (String.Equals(Me._Profession, value) = false) Then
				Me.OnProfessionChanging(value)
				Me.SendPropertyChanging
				Me._Profession = value
				Me.SendPropertyChanged("Profession")
				Me.OnProfessionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Salary", DbType:="VarChar(50)")>  _
	Public Property Salary() As String
		Get
			Return Me._Salary
		End Get
		Set
			If (String.Equals(Me._Salary, value) = false) Then
				Me.OnSalaryChanging(value)
				Me.SendPropertyChanging
				Me._Salary = value
				Me.SendPropertyChanged("Salary")
				Me.OnSalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proof", DbType:="VarChar(50)")>  _
	Public Property Proof() As String
		Get
			Return Me._Proof
		End Get
		Set
			If (String.Equals(Me._Proof, value) = false) Then
				Me.OnProofChanging(value)
				Me.SendPropertyChanging
				Me._Proof = value
				Me.SendPropertyChanged("Proof")
				Me.OnProofChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingId", DbType:="Int")>  _
	Public Property BookingId() As System.Nullable(Of Integer)
		Get
			Return Me._BookingId
		End Get
		Set
			If (Me._BookingId.Equals(value) = false) Then
				Me.OnBookingIdChanging(value)
				Me.SendPropertyChanging
				Me._BookingId = value
				Me.SendPropertyChanged("BookingId")
				Me.OnBookingIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DealerTable")>  _
Partial Public Class DealerTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DealerId As Integer
	
	Private _Name As String
	
	Private _Address As String
	
	Private _Location As String
	
	Private _ContactNo As System.Nullable(Of Decimal)
	
	Private _Image As String
	
	Private _Status As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDealerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDealerIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnContactNoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnContactNoChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As String)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DealerId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DealerId() As Integer
		Get
			Return Me._DealerId
		End Get
		Set
			If ((Me._DealerId = value)  _
						= false) Then
				Me.OnDealerIdChanging(value)
				Me.SendPropertyChanging
				Me._DealerId = value
				Me.SendPropertyChanged("DealerId")
				Me.OnDealerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(MAX)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="VarChar(50)")>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactNo", DbType:="Decimal(18,0)")>  _
	Public Property ContactNo() As System.Nullable(Of Decimal)
		Get
			Return Me._ContactNo
		End Get
		Set
			If (Me._ContactNo.Equals(value) = false) Then
				Me.OnContactNoChanging(value)
				Me.SendPropertyChanging
				Me._ContactNo = value
				Me.SendPropertyChanged("ContactNo")
				Me.OnContactNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="VarChar(50)")>  _
	Public Property Image() As String
		Get
			Return Me._Image
		End Get
		Set
			If (String.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cartable")>  _
Partial Public Class Cartable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _carid As Integer
	
	Private _CarName As String
	
	Private _Description As String
	
	Private _Variant As String
	
	Private _Price As String
	
	Private _Image As String
	
	Private _Categoryid As System.Nullable(Of Integer)
	
	Private _Status As String
	
	Private _Offer As System.Nullable(Of Decimal)
	
	Private _OfferStatus As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncaridChanging(value As Integer)
    End Sub
    Partial Private Sub OncaridChanged()
    End Sub
    Partial Private Sub OnCarNameChanging(value As String)
    End Sub
    Partial Private Sub OnCarNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnVariantChanging(value As String)
    End Sub
    Partial Private Sub OnVariantChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As String)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As String)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnCategoryidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoryidChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnOfferChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOfferChanged()
    End Sub
    Partial Private Sub OnOfferStatusChanging(value As String)
    End Sub
    Partial Private Sub OnOfferStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_carid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property carid() As Integer
		Get
			Return Me._carid
		End Get
		Set
			If ((Me._carid = value)  _
						= false) Then
				Me.OncaridChanging(value)
				Me.SendPropertyChanging
				Me._carid = value
				Me.SendPropertyChanged("carid")
				Me.OncaridChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CarName", DbType:="VarChar(50)")>  _
	Public Property CarName() As String
		Get
			Return Me._CarName
		End Get
		Set
			If (String.Equals(Me._CarName, value) = false) Then
				Me.OnCarNameChanging(value)
				Me.SendPropertyChanging
				Me._CarName = value
				Me.SendPropertyChanged("CarName")
				Me.OnCarNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Variant", Storage:="_Variant", DbType:="VarChar(50)")>  _
	Public Property [Variant]() As String
		Get
			Return Me._Variant
		End Get
		Set
			If (String.Equals(Me._Variant, value) = false) Then
				Me.OnVariantChanging(value)
				Me.SendPropertyChanging
				Me._Variant = value
				Me.SendPropertyChanged("[Variant]")
				Me.OnVariantChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="VarChar(50)")>  _
	Public Property Price() As String
		Get
			Return Me._Price
		End Get
		Set
			If (String.Equals(Me._Price, value) = false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="VarChar(50)")>  _
	Public Property Image() As String
		Get
			Return Me._Image
		End Get
		Set
			If (String.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Categoryid", DbType:="Int")>  _
	Public Property Categoryid() As System.Nullable(Of Integer)
		Get
			Return Me._Categoryid
		End Get
		Set
			If (Me._Categoryid.Equals(value) = false) Then
				Me.OnCategoryidChanging(value)
				Me.SendPropertyChanging
				Me._Categoryid = value
				Me.SendPropertyChanged("Categoryid")
				Me.OnCategoryidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Offer", DbType:="Decimal(18,0)")>  _
	Public Property Offer() As System.Nullable(Of Decimal)
		Get
			Return Me._Offer
		End Get
		Set
			If (Me._Offer.Equals(value) = false) Then
				Me.OnOfferChanging(value)
				Me.SendPropertyChanging
				Me._Offer = value
				Me.SendPropertyChanged("Offer")
				Me.OnOfferChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfferStatus", DbType:="VarChar(50)")>  _
	Public Property OfferStatus() As String
		Get
			Return Me._OfferStatus
		End Get
		Set
			If (String.Equals(Me._OfferStatus, value) = false) Then
				Me.OnOfferStatusChanging(value)
				Me.SendPropertyChanging
				Me._OfferStatus = value
				Me.SendPropertyChanged("OfferStatus")
				Me.OnOfferStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
